package counting;
/**
 * 
 * @author Filippo Todeschini
 *
 */
public class CountingBloomFilter {
	private int[] set;
	private int m; 
	private int k; //number of hash functions
	private double fp_obj;  
	private int n; // size of the array that has to be represented in bloom filter
	
	/**
	 * Constructor of counting bloom filter
	 * @param aP universe of hash function
	 * @param init array to be represented in bloom filter
	 */
	public CountingBloomFilter(double aFP,String[] init){
		n=init.length;
		fp_obj=aFP;
		m=(int)Math.round(-n * Math.log(fp_obj)/Math.pow(Math.log(2), 2));
		k=(int)Math.round((double)m/(double)n* Math.log(2));
		set=new int[m];
		for(int i=0;i<init.length;i++){
			for(int j=0;j<k;j++){
				int hash=getHashing(init[i], j);
				set[hash]=set[hash]+1;
			}
		}
		for(int i=0;i<set.length;i++){
			if(set[i]!=1)set[i]=0;
		}
		getInfo();

	}
	/**
	 * method to get the hash value of an element
	 * @param element element to be hashed
	 * @param i index of hashing function
	 * @return hashing value
	 */
	private int getHashing(String element, int i){
		int hash=(hash1(element)+ hash2(element) * i) % m;
		if( hash < 0 ) hash += m;
		return hash;
	}
	/**
	 * method for hashing function 1
	 * @param key element to be hashed
	 * @return value of hash function
	 */
	private int hash1( String key){ 
		int val = 0;
		for( int i = 0; i < key.length( ); i++ ) val = 31 * val + key.charAt( i );
		return val; 
	}
	/**
	 * method for hashing function 2
	 * @param key element to be hashed
	 * @return value of hash function
	 */
	private int hash2( String key){ 
		int val = 1;
		for( int i = 0; i < key.length( ); i++ ) val = 31 * val + key.charAt( i );
		return val; 
	}
	
	/**
	 * method for add operation into bloom filter
	 * @param element element to be added
	 */
	public void add(String element){
		for(int j=0;j<k;j++){
			int hash=getHashing(element, j);
			set[hash]=set[hash]+1;
		}
	}
	/**
	 * method for lookup operation
	 * @param element element to be lookup
	 * @return true if element is find, false otherwise
	 */
	public boolean lookup(String element){
		for(int j=0;j<k;j++){
			int hash=getHashing(element, j);
			if(set[hash]==0){
				return false;
			}
		}
		return true;
	}

	/**
	 * method for delete operation
	 * @param element element to be deleted
	 */
	public void delete(String element){
		for(int j=0;j<k;j++){
			int hash=getHashing(element,j);
			if(set[hash]>0) set[hash]=set[hash]-1;
		}
	}
	
	/**
	 * method for printing the bloom filter
	 */
	public void printSet(){
		System.out.print("[");
		for(int i=0;i<set.length-1;i++){
			System.out.print(set[i]+", ");
		}
		System.out.print(set[set.length-1]+"]");
		System.out.println();
	}
	
	/**
	 * method to get the probability of false positive
	 * @return the probability of false positive
	 */
	public double getProbabilityFP(){
		double fpProb=Math.pow(1-Math.pow((1-(double)1/(double)m),k*n),k);
		return fpProb;
	}
	public void getInfo(){
		System.out.println("N ->"+this.n);
		System.out.println("M ->"+this.m);
		System.out.println("K ->"+this.k);
		System.out.println("FP Obj ->"+this.fp_obj);
		int count0=0;
		int count1=0;
		for(int i=0; i<set.length;i++){
			if(set[i]==0)count0++;
			else count1++;
		}
		System.out.println("Number of 0 ->"+count0);
		System.out.println("Number of 1 ->"+count1);
		
	}

}
